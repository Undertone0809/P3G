{%- set license_classifiers = {
    'MIT': 'License :: OSI Approved :: MIT License',
    'BSD-3': 'License :: OSI Approved :: BSD License',
    'GNU GPL v3.0': 'License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)',
    'Apache Software License 2.0': 'License :: OSI Approved :: Apache Software License',
} -%}
{%- set python_version_splitted = cookiecutter.minimal_python_version.split('.') | map('int') | list -%}
# Poetry pyproject.toml: https://python-poetry.org/docs/pyproject/
[build-system]
requires = ["poetry_core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "{{ cookiecutter.project_name }}"
version = "{{ cookiecutter.version }}"
description = "{{ cookiecutter.project_description }}"
readme = "README.md"
authors = ["{{ cookiecutter.organization }} <{{ cookiecutter.email }}>"]
license = "{{ cookiecutter.license }}"
repository = "https://github.com/{{ cookiecutter.github_name }}/{{ cookiecutter.project_name }}"
homepage = "https://github.com/{{ cookiecutter.github_name }}/{{ cookiecutter.project_name }}"

# Keywords description https://python-poetry.org/docs/pyproject/#keywords
keywords = []  #! Update me

# Pypi classifiers: https://pypi.org/classifiers/
classifiers = [  #! Update me
  "Development Status :: 3 - Alpha",
  "Intended Audience :: Developers",
  "Operating System :: OS Independent",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "{{ license_classifiers[cookiecutter.license] }}",
  "Programming Language :: Python :: 3",
  {%- for minor_version in cookiecutter._all_python_minor_version if minor_version >= python_version_splitted[1] %}
  "Programming Language :: Python :: 3.{{ minor_version }}",{% endfor %}
]

{% if cookiecutter.create_example_template == 'cli' -%}[tool.poetry.scripts]
# Entry points for the package https://python-poetry.org/docs/pyproject/#scripts
"{{ cookiecutter.project_name }}" = "{{ cookiecutter.project_name.lower().replace(' ', '_').replace('-', '_') }}.__main__:app"{%- endif %}

{% if cookiecutter.using_tsinghua_mirror_source -%}
[[tool.poetry.source]]
name = "tsinghua"
url = "https://pypi.tuna.tsinghua.edu.cn/simple"
priority = "default"
{%- endif %}

[tool.poetry.dependencies]
python = "^{{ cookiecutter.minimal_python_version }}"
{% if cookiecutter.minimal_python_version == '3.7' -%}importlib_metadata = {version = "^4.5.0", python = "<3.8"}{%- endif %}
{%+ if cookiecutter.create_example_template == 'cli' -%}
typer = {extras = ["all"], version = "^0.4.0"}
rich = "^10.14.0"
{%- endif %}

[tool.poetry.group.dev.dependencies]
pytest = "^8.3.3"
pytest-html = "^4.1.1"
pytest-cov = "^5.0.0"
bandit = "^1.7.10"
ruff = "^0.7.2"
{% if cookiecutter.install_pre_commit %}pre-commit = "^2.21.0"{% endif %}
{% if cookiecutter.install_coverage -%}
coverage = "^7.2.7"
coverage-badge = "^1.1.0"
{%- endif %}
{% if cookiecutter.install_safety %}safety = "^3.2.10"{% endif %}
{% if cookiecutter.install_darglint %}darglint = "^1.8.1"{% endif %}

[tool.ruff]
# https://beta.ruff.rs/docs/settings/
# https://docs.astral.sh/ruff/configuration/
line-length = 88

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]
respect-gitignore = true

[tool.ruff.lint]
# https://beta.ruff.rs/docs/rules/
extend-select = ["I"]
exclude = ["*.ipynb"]
ignore = ["F401"]
select = ["E", "W", "F", "I"]

[tool.ruff.lint.pydocstyle]
convention = "google"  # Accepts: "google", "numpy", or "pep257".

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
exclude = ["*.ipynb"]
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.pytest.ini_options]
# https://docs.pytest.org/en/6.2.x/customize.html#pyproject-toml
# Directories that are not visited by pytest collector:
norecursedirs =["hooks", "*.egg", ".eggs", "dist", "build", "docs", ".tox", ".git", "__pycache__"]
doctest_optionflags = ["NUMBER", "NORMALIZE_WHITESPACE", "IGNORE_EXCEPTION_DETAIL"]

# Extra options:
addopts = [
  "--strict-markers",
  "--tb=short",
  "--doctest-modules",
  "--doctest-continue-on-failure",
]

{% if cookiecutter.install_coverage -%}
[tool.coverage.run]
source = ["{{ cookiecutter.project_name }}", "tests"]
branch = true

[tool.coverage.report]
fail_under = 50
show_missing = true
{%- endif %}

[tool.darglint]
strictness = "short"
docstring_style = "google"